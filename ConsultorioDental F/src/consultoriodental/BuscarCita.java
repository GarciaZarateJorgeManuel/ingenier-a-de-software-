/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package consultoriodental;

import java.awt.BorderLayout;
import java.io.IOException;
import java.net.Socket;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;

/**
 *
 * @author Armando1
 */
public class BuscarCita extends javax.swing.JInternalFrame {

    /**
     * Creates new form BuscarCita
     */
    ArrayList<Object[]> datos;
    DefaultListModel model= new DefaultListModel();
    String url ="jdbc:mysql://localhost:3306/clinicadental?user=root&password=panda101";
    MenuPrincipal mp;
    MenuSecretaria ms;
    
    public BuscarCita(boolean permisos,JFrame menu) {
        initComponents();
        if(permisos){
            mp=(MenuPrincipal)menu;
        }else{
            ms=(MenuSecretaria)menu;
        }
           // Agregar_cita.ManejadorTecla mt = new Agregar_cita.ManejadorTecla();
        setTitle("Buscar Cita");
          FondoPanel fp  = new FondoPanel("/fondo/fondoverde.jpg");
        fp.setSize(794, 509);
        this.add(fp,BorderLayout.CENTER);
      //  this.setBounds(0, 0, 200, 200);
      this.setLocked(true);
      iBuscarFecha.setVisible(false);
      iBuscar.setToolTipText("ingrese nombre o algun apellido a filtrar");
      iBuscarFecha.setToolTipText("ingrese una fecha valida");
      model.add(0, "NOMBRE DEL PACIENTE            ESTATUS");
      listaFiltro.setModel(model);
      
      this.pack();
        
    }
    private boolean locked = false;

    @Override
    public void reshape(int x, int y, int width, int height) {
        if (!locked) {
            super.reshape(x, y, width, height);
        }
    }

    public boolean isLocked() {
        return locked;
    }

    public void setLocked(boolean locked) {
        this.locked = locked;
    }
    
    public void agregarDatosList(ArrayList<Object[]> datos){
        String aux="",auxfecha="PENDIENTE";
        java.util.Date fechaActual = new java.util.Date();
        
        SimpleDateFormat fecha = new SimpleDateFormat("YYYY-MM-dd");
        SimpleDateFormat hora = new SimpleDateFormat("hh:mm");
        System.out.println("hora actual: "+hora.format(fechaActual)+"hora b: "+hora.format(fechaActual).substring(0, 2)+" minutos b: "+hora.format(fechaActual).substring(3));
        

        for (int i = 0; i < datos.size(); i++) {
            String fechaCita = (String) datos.get(i)[5];
            String horaCita = (String) datos.get(i)[6];
            System.out.println("fecha cita: "+fechaCita);
            // nuevos
            if (Integer.parseInt(fecha.format(fechaActual).substring(5, 7)) == Integer.parseInt(fechaCita.substring(5, 7)) && Integer.parseInt(fecha.format(fechaActual).substring(8, 10)) == Integer.parseInt(fechaCita.substring(8, 10))) {
                if (Integer.parseInt(hora.format(fechaActual).substring(0, 2)) >= Integer.parseInt(horaCita.substring(0, 2)) && Integer.parseInt(hora.format(fechaActual).substring(3)) > Integer.parseInt(horaCita.substring(3))) {
                    auxfecha = "RELIZADA";
                    System.out.println("primer if");
                }
            }else if(Integer.parseInt(fecha.format(fechaActual).substring(5, 7)) == Integer.parseInt(fechaCita.substring(5, 7)) && Integer.parseInt(fecha.format(fechaActual).substring(8, 10)) > Integer.parseInt(fechaCita.substring(8, 10))){
                auxfecha = "RELIZADA";    
                    System.out.println("2 if");
            }else if(Integer.parseInt(fecha.format(fechaActual).substring(5, 7)) > Integer.parseInt(fechaCita.substring(5, 7))){
                auxfecha = "RELIZADA";  
                    System.out.println("3 if");
            }else{
                auxfecha="PENDIENTE";
            }
            
            aux = (String) datos.get(i)[0] + "   " + datos.get(i)[1] + "  " + datos.get(i)[2] + "            " + auxfecha;
            model.addElement(aux);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iBuscarFecha = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        seleccionarBusqueda = new javax.swing.JComboBox();
        bFiltrar = new javax.swing.JButton();
        iBuscar = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        oDetalles = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaFiltro = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        bCancelarCita = new javax.swing.JButton();
        bPosponerCita = new javax.swing.JButton();

        iBuscarFecha.setDate(obtenerFechaActual());
        iBuscarFecha.setMaxSelectableDate(new java.util.Date(1546326115000L));
        iBuscarFecha.setMinSelectableDate(new java.util.Date(1420095715000L));

        jLabel1.setText("Buscar por:");

        seleccionarBusqueda.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fecha", "Nombre de Paciente" }));
        seleccionarBusqueda.setSelectedIndex(1);
        seleccionarBusqueda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                seleccionarBusquedaItemStateChanged(evt);
            }
        });

        bFiltrar.setBackground(new java.awt.Color(168, 202, 235));
        bFiltrar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bFiltrar.setText("Filtrar");
        bFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFiltrarActionPerformed(evt);
            }
        });

        iBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                iBuscarKeyTyped(evt);
            }
        });

        oDetalles.setEditable(false);
        oDetalles.setColumns(20);
        oDetalles.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        oDetalles.setRows(5);
        jScrollPane2.setViewportView(oDetalles);

        jLabel2.setText("Coincidencias: ");

        listaFiltro.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaFiltro.setToolTipText("selecione un nombre para ver mas detalles");
        listaFiltro.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaFiltroValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listaFiltro);

        jLabel3.setText("Detalles busqueda:");

        bCancelarCita.setText("Cancelar Cita");
        bCancelarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelarCitaActionPerformed(evt);
            }
        });

        bPosponerCita.setText("Posponer Cita");
        bPosponerCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPosponerCitaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(seleccionarBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bFiltrar))
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(bCancelarCita)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bPosponerCita))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(seleccionarBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bCancelarCita)
                            .addComponent(bPosponerCita)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(iBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bFiltrar)
                                    .addComponent(jLabel3))))
                        .addGap(45, 45, 45)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seleccionarBusquedaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_seleccionarBusquedaItemStateChanged
        if(seleccionarBusqueda.getSelectedIndex()==1){
            iBuscarFecha.setDate(null);
            iBuscar.setVisible(true);   
            iBuscarFecha.setVisible(false); 
        }else{
            iBuscar.setText("");
            iBuscarFecha.setVisible(true); 
            iBuscar.setVisible(false);            
        }
    }//GEN-LAST:event_seleccionarBusquedaItemStateChanged

    private void clearResult(){
        model.removeAllElements();
        model.add(0, "NOMBRE DEL PACIENTE          ESTATUS");
        oDetalles.setText("");
        listaFiltro.setSelectedIndex(0);  
    }
    
    private void bFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFiltrarActionPerformed
        if (!iBuscar.getText().isEmpty() || iBuscarFecha.getDate() != null) {
            datos = new ArrayList<>();
            clearResult();
            String buscarpor = "";
            SimpleDateFormat fecha = new SimpleDateFormat("yyyy-MM-dd");
            if (seleccionarBusqueda.getSelectedIndex() == 1) {
                buscarpor = "Select * from paciente p inner join cita c on p.id_paciente=c.id_paciente "
                        + "where p.nombre like '%" + iBuscar.getText().toUpperCase() + "%' or apellido_Paterno like '%" + iBuscar.getText().toUpperCase() + "%' or apellido_materno like '%" + iBuscar.getText().toUpperCase() + "%'";
            } else {
                ///// METER UN IF PARA SOLO MOSTRAR CITAS FUTURAS NO PASADAS
                buscarpor = "Select * from paciente p inner join cita c on p.id_paciente=c.id_paciente"
                        + " where c.fecha_cita = '" + fecha.format(iBuscarFecha.getDate()) + "'";
            }
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection co = DriverManager.getConnection(url);

                Statement stm = co.createStatement();
                ResultSet rs = stm.executeQuery(buscarpor);

                
                boolean flag = false;
                    while (rs.next()) {
                    
                        String dat[] = new String[11];
                        dat[0] = String.valueOf(rs.getString("nombre"));//nombre
                        dat[1] = String.valueOf(rs.getString("apellido_Paterno"));//apPaterno
                        dat[2] = String.valueOf(rs.getString("apellido_materno"));//apMaterno 
                        dat[3] = String.valueOf(rs.getString("genero"));//id_paciente
                        dat[4] = String.valueOf(rs.getString("telefono"));//nombre
                        dat[5] = String.valueOf(rs.getString("fecha_cita"));//apPaterno
                        dat[6] = String.valueOf(rs.getString("hora_cita"));//apMaterno 
                        dat[7] = String.valueOf(rs.getString("motivo"));//apMaterno 

                        dat[8] = String.valueOf(rs.getString("id_cita"));//id_cita
                        dat[9] = String.valueOf(rs.getString("id_paciente"));//id_paciente
                        dat[10]= String.valueOf(rs.getString("email"));//id_paciente
                        datos.add(dat);
                        flag=true;
                    }
                    if(flag)
                    agregarDatosList(datos);                
                    else
                        JOptionPane.showMessageDialog(this, "No hay citas que coincidan con la busqueda");
                    rs.close();
                    co.close();
                        
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(BuscarCita.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"ingrese un valor para efectuar la busqueda");
        }
    }//GEN-LAST:event_bFiltrarActionPerformed

    private void listaFiltroValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaFiltroValueChanged
        if (listaFiltro.getSelectedIndex() >0) {
            int auxindex = listaFiltro.getSelectedIndex() - 1;

            String datosss = "";
            datosss += "NOMBRE: " + datos.get(auxindex)[0] + "\n";
            datosss += "APELLIDO PATERNO: " + datos.get(auxindex)[1] + "\n";
            datosss += "APELLIDO MATERNO: " + datos.get(auxindex)[2] + "\n";
            datosss += "GENERO: " + datos.get(auxindex)[3] + "\n";
            datosss += "TELEFONO: " + datos.get(auxindex)[4] + "\n";
            datosss += "FECHA DE LA CITA: " + datos.get(auxindex)[5] + "\n";
            datosss += "HORA DE LA CITA: " + datos.get(auxindex)[6] + "\n";
            datosss += "MOTIVO DE LA CITA: " + datos.get(auxindex)[7];
            
            oDetalles.setText(datosss);

        }
    }//GEN-LAST:event_listaFiltroValueChanged

    private void EnviarMailConfirmacion(String to,String Men) {
        String para=to;
        String Mensage=Men;
        String Asunto="CITA AGENDADA EXITOSAMENTE";
        EnviarMail env = new EnviarMail(para, Mensage, Asunto);
        env.SendMail();        
    
    }
    private void bCancelarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelarCitaActionPerformed
        // TODO add your handling code here:
        if (listaFiltro.getSelectedIndex() > 0) {
            if (JOptionPane.showConfirmDialog(rootPane, "¿Realmente desea cancelar la cita ?",
                    "Cancelacion de cita", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                int auxindex = listaFiltro.getSelectedIndex() - 1;
                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection co = DriverManager.getConnection(url);
                    PreparedStatement stmt = co.prepareStatement("DELETE FROM cita WHERE id_cita=" + Integer.parseInt((String) datos.get(auxindex)[8]) + ";");
                    stmt.executeUpdate();
                    stmt.close();
                    co.close();
                    /**try {
                    Socket s = new Socket("www.gmail.com", 80);
                    if (s.isConnected()) {
                        String men="Querido usuario:  "+datos.get(listaFiltro.getSelectedIndex() - 1)[0]+" "+datos.get(listaFiltro.getSelectedIndex() - 1)[1]+" "+datos.get(listaFiltro.getSelectedIndex() - 1)[2]+
                                ".\nlamentamos informarle que su cita del dia: "+datos.get(auxindex)[5]+""
                    + "\n y hora: "+datos.get(auxindex)[6]+"a sido cancelada.\nGracias por su preferencia.";
                        EnviarMailConfirmacion((String) datos.get(auxindex)[10],men);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(AgregarPaciente.class.getName()).log(Level.SEVERE, null, ex);
                }*/
                    JOptionPane.showMessageDialog(this, "Cita Eliminada con exito");
                    bFiltrarActionPerformed(evt);
                
                } catch (ClassNotFoundException exc) {
                    exc.printStackTrace();
                } catch (SQLException ex) {
                    Logger.getLogger(BuscarCita.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_bCancelarCitaActionPerformed

    private void bPosponerCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPosponerCitaActionPerformed
        // TODO add your handling code here:
        int auxindex = listaFiltro.getSelectedIndex() - 1;
        if (auxindex > -1) {
            System.out.println("posponer");
            java.util.Date fechaActual= new java.util.Date();
            java.util.Date fechac=null;
            String fechaCita=(String) datos.get(auxindex)[5];
            String horaCita=(String) datos.get(auxindex)[6];
            SimpleDateFormat fecha = new SimpleDateFormat("YYYY-MM-dd");
            SimpleDateFormat hora = new SimpleDateFormat("hh:mm");
            
            try {
                fechac = fecha.parse(fechaCita);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            System.out.println("mes actual: "+fecha.format(fechaActual).substring(5, 7)+" dia actual: "+fecha.format(fechaActual).substring(8,10)+
                    "\nmes cita: "+fechaCita.substring(5, 7)+" dia cita: "+fechaCita.substring(8, 10));
            
            System.out.println("fecha actual: "+fecha.format(fechaActual)+" vs fecha de la cita: "+fecha.format(fechac));
            if (Integer.parseInt(fecha.format(fechaActual).substring(5, 7)) < Integer.parseInt(fechaCita.substring(5, 7))) {
                hacerPosponer(auxindex);
            } else if (Integer.parseInt(fecha.format(fechaActual).substring(5, 7)) == Integer.parseInt(fechaCita.substring(5, 7))) {
                if (Integer.parseInt(fecha.format(fechaActual).substring(8, 10)) < Integer.parseInt(fechaCita.substring(8, 10))) {
                    hacerPosponer(auxindex);
                } else if (Integer.parseInt(fecha.format(fechaActual).substring(8, 10)) == Integer.parseInt(fechaCita.substring(8, 10))) {
                    if (Integer.parseInt(hora.format(fechaActual).substring(0, 2)) <= Integer.parseInt(horaCita.substring(0, 2)) && Integer.parseInt(hora.format(fechaActual).substring(3)) < Integer.parseInt(horaCita.substring(3))) {
                        hacerPosponer(auxindex);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "La fecha de esta cita ya paso");
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "La fecha de esta cita ya paso");
                }
            } else if (Integer.parseInt(fecha.format(fechaActual).substring(5, 7)) > Integer.parseInt(fechaCita.substring(5, 7))) {
                JOptionPane.showMessageDialog(rootPane, "La fecha de esta cita ya paso");
            }
        }
    }//GEN-LAST:event_bPosponerCitaActionPerformed

    private void hacerPosponer(int auxindex){
        PanelCalendarCita pc = new PanelCalendarCita(this, (String) datos.get(auxindex)[8]);
                    JDialog frame = new JDialog();
                    frame.add(pc);
                    pc.setPanelPadre(frame);
                    frame.setModal(true);
                    System.out.println("posponer");
                    frame.setLocationRelativeTo(this);
                    frame.setSize(350, 261);
                    frame.pack();

                    frame.setVisible(true);
                    pc.show();
                    frame.setEnabled(true);
                    

                    System.out.println("looooooooooooooooool");
    }
    private void iBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_iBuscarKeyTyped
        // TODO add your handling code here:
         String tamanio= iBuscar.getText(); 
        char c = evt.getKeyChar();
        if (Character.isDigit(c) || tamanio.length()>=20) {
            getToolkit().beep();
            evt.consume();
            System.out.println("ingresa solo letras");
            // Error.setText("Ingresa Solo Letras  
        }
    }//GEN-LAST:event_iBuscarKeyTyped

    public void ActualizarCita(String id,String hora,java.util.Date dia,java.awt.event.ActionEvent evt){
        try{
            
            int auxindex = listaFiltro.getSelectedIndex() - 1;
            SimpleDateFormat fecha = new SimpleDateFormat("yyyy-MM-dd");
            java.sql.Date d = new java.sql.Date(dia.getTime());
            Class.forName("com.mysql.jdbc.Driver");
            Connection co = DriverManager.getConnection(url);
            Statement stm = co.createStatement();            
            System.out.println("entro para hacer consulta");
            ResultSet rs = stm.executeQuery("Select * from cita "
                    + " where fecha_cita = '" + fecha.format(dia) + "' and hora_cita = '"+ hora+"';");
            System.out.println("hizo consulta");
            int aux = 0;
            while (rs.next()) {
                aux=rs.getInt("id_cita");
            }
            if (aux == 0) {

                co = DriverManager.getConnection(url);
                PreparedStatement stmt = co.prepareStatement("UPDATE  cita SET fecha_cita=?,hora_cita=? where id_cita=" + id);

                stmt.setDate(1, d);
                stmt.setString(2, hora);
                System.out.println("lol actualizo");
                stmt.executeUpdate();
                /**try {
                    Socket s = new Socket("www.gmail.com", 80);
                    if (s.isConnected()) {
                        String men="Querido usuario:  "+datos.get(listaFiltro.getSelectedIndex() - 1)[0]+" "+datos.get(listaFiltro.getSelectedIndex() - 1)[1]+" "+datos.get(listaFiltro.getSelectedIndex() - 1)[2]+
                                ".\nlamentamos informarle que su cita del dia: "+datos.get(auxindex)[5]+""
                    + "\n y hora: "+datos.get(auxindex)[6]+"a sido pospuesta para el dia "+fecha.format(dia) +"y hora "+hora+".\nGracias por su preferencia.";
                        EnviarMailConfirmacion((String) datos.get(auxindex)[10],men);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(AgregarPaciente.class.getName()).log(Level.SEVERE, null, ex);
                }*/
                    JOptionPane.showMessageDialog(this, "Cita Actualizada con exito");
                    bFiltrarActionPerformed(evt);
                

            }else{    
                JOptionPane.showMessageDialog(this, "Hay una cita ya agendada con esa hora y fecha");
            }
        } catch (ClassNotFoundException exc) {
            exc.printStackTrace();
        } catch (SQLException ex) {
            //Logger.getLogger(ConexionSQL.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public java.util.Date obtenerFechaActual() {
        java.util.Date date = new java.util.Date();
        SimpleDateFormat fdate = new SimpleDateFormat("dd");
        SimpleDateFormat fMes = new SimpleDateFormat("MM");

        int dia = (Integer.parseInt(fdate.format(date)));
        int mes = (Integer.parseInt(fMes.format(date)));
        if (mes == 02) {
            if (dia < 28) {
                dia += 1;
            } else {
                dia = 1;
                mes += 1;
            }
        }
        if (mes == 01 && mes == 03 && mes == 05 && mes == 07 && mes == 8 && mes == 10 && mes == 12) {
            if (dia < 31) {
                dia += 1;
            } else {
                dia = 1;
                mes += 1;
            }
        } else if (dia < 30) {
            dia += 1;
        } else {
            dia = 1;
            mes += 1;
        }

        Calendar min = Calendar.getInstance();
        min.setTime(date);
        min.set(Calendar.MONTH, mes - 1);
        min.set(Calendar.DATE, dia);
        System.out.println("fecha actual : "+min.getTime().toString());
        return min.getTime();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancelarCita;
    private javax.swing.JButton bFiltrar;
    private javax.swing.JButton bPosponerCita;
    private javax.swing.JTextField iBuscar;
    private com.toedter.calendar.JDateChooser iBuscarFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listaFiltro;
    private javax.swing.JTextArea oDetalles;
    private javax.swing.JComboBox seleccionarBusqueda;
    // End of variables declaration//GEN-END:variables
}
